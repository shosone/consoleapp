/* MIT License
 * 
 * Copyright (c) 2018 Sho Sone
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE. */

#ifndef CONSOLEAPP_OPTION_H
#define CONSOLEAPP_OPTION_H

#ifdef _WIN32
#include "./win32.h"
#endif

#include "./common.h"

#define CONSOLEAPP_OPTION_VERSION "0.0"

#include "./option_errmsg.h"

#define OPTION_SUCCESS  0
#define OPTION_FAILURE -1

/* structure for holding information on each option specified at program execution */
typedef struct _opt_group_t{
    unsigned int priority;    /* a unique number corresponding to option */
    int          content_num; /* number of elements of content */
    char       **contents;    /* content attached to options. for example, For example, 1 and 2 in "somecommand - foo = 1, 2 bar" are assigned to the contents [0] and contents [1] of the foo option. */
}opt_group_t;

extern int /* OPTION_SUCCESS or OPTION_FAILURE */
regOptProperty( /*  */
        unsigned int priority,        /* order of options to be extracted by popOptGroup (priority) */
        const char *short_form,      /* [in] short format of option, for example, -h. */
        const char *long_form,       /* [in] long format of option. for example, --help. */
        int          content_num_min, /* minimum number of contents attached to option */
        int          content_num_max, /* maximum number of contents attached to option */
        int        (*contentsChecker)(char **contents, int content_num)); /* callback function to check option contents */

extern int /* OPTION_SUCCESS or OPTION_FAILURE */
groupingOpt( /* function which grouping options by option information registered in regOptionProperty and arguments of main obtained from cli. */
        int     argc,        /* first argument of main */
        char   *argv[],      /* second argument of main */
        int    *optless_num, /* [out] strings of argv which not belonging to any option */
        char ***optless);    /* [out] number of elements of optless_num */

extern opt_group_t* /* a pointer to opt_group_t generated by groupingOpt, or NULL if it exceeds size. */
popOptGroup(void); /* a function that returns a pointer to opt_group_t generated by groupingOpt The order of the pointers to return opt_group_t depends on the priority registered in regOptionProperty. */

extern int  /* the value of the error code. When the first OPTION_SUCCESS is returned, all error codes obtained by this function become OPTION_SUCCESS. */
popOptErrcode(void); /* a function that returns the error code obtained by adapting the contentsChecker registered with regOptionProperty to each option.The order of return depends on the priority registered in regOptionProperty. */

extern void
endOptAnalization(void); /* function to release all dynamic memory secured by consoleapp/option */

#endif
